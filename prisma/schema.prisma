generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @map("_id")
  name           String?
  email          String?   @unique
  number         String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Optional Category for worker
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Relations
  accounts    Account[]
  sessions    Session[]
  gigsPosted  Gig[]        @relation("GigsPostedByCustomer")
  gigRequests GigRequest[] @relation("RequestsMadeByWorker")
  wallet      Wallet?
}

model Wallet {
  id      String @id @default(uuid()) @map("_id")
  userId  String @unique
  balance Int    @default(0)

  user             User               @relation(fields: [userId], references: [id])
  transaction_logs transaction_logs[]
}

model transaction_logs {
  id        String   @id @default(uuid()) @map("_id")
  walletId  String
  amount    Int // Amount added or deducted (+10 for credits, -5 for deductions)
  reason    String // Reason for the credit change, e.g., "Signup Bonus", "Referral"
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model Gig {
  id          String    @id @default(uuid()) @map("_id")
  customerId  String
  categoryId  String
  title       String
  description String
  createdAt   DateTime  @default(now())
  status      GigStatus @default(PENDING)

  customer User         @relation("GigsPostedByCustomer", fields: [customerId], references: [id])
  category Category     @relation(fields: [categoryId], references: [id])
  requests GigRequest[] @relation("GigRequestsForGig")
}

model GigRequest {
  id          String        @id @default(uuid()) @map("_id")
  gigId       String
  requesterId String
  createdAt   DateTime      @default(now())
  status      RequestStatus @default(PENDING)

  gig       Gig  @relation("GigRequestsForGig", fields: [gigId], references: [id])
  requester User @relation("RequestsMadeByWorker", fields: [requesterId], references: [id])
}

model Category {
  id          String  @id @default(uuid()) @map("_id")
  name        String  @unique
  description String?
  users       User[]
  gigs        Gig[]
}

model Account {
  id                       String  @id @default(uuid()) @map("_id")
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GigStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
